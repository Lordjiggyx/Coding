====Getting Started===

The best way to start an app with react is using the 

create-react-app method

This method ia a toolchain and uses a lot of different cdn files to give you a good start
at creating your app 

To do create a new folder and go to it then type in the terminail

npx create-react-app app_name

This will take a few mins to complete. 
At the moment we wil continue to delete all files in the src folder given until all concepts are fully understood 


In the source folder we will now create 2 files 


index.js
style.css

Now in the Html file you can just use emmet and then insert the following line


 <div id="root">
        
    </div>

This is where all the code rnedered by react will be placed 

do not foreget to attach your index.js in a script tag


In the index.js file you must now import react and reactDom 

import React from "react";
import ReactDom from "react-dom"


react dom has a render method attached to it
this method takes in two parameters

1.What do youb wnat rnedered
2. Where you want this code rendered to

The secon parameter can be obtained by using the document.getElementById() method and pointing to the root id in the html file

for example 

ReactDOM.render(<h1>Hello World</h1> , document.getElementById("root"))

The to get the application actually working you can gi into the terminal and type in npm start

The individuals who created react created a language called JSX 
this language is a javscript version of html with a few slight diffrences

It is important to note that you can not render two jsx eleemnts beside eachother . To combat this you can wrap this in an element 

ReactDOM.render(<div><h1>Hello World</h1> <p>This is a paragraph</p></div>, document.getElementById("root"))


===ReactDOM & JSX Practice===

objective- fill in the boilerplat react code in order to render an unordered list to the page The list should contain 3 list items with anything you want


ReactDOM.render
(<div>
    <ul>
        <li>Item 1 </li>
        <li>Item 2 </li>
        <li>Item 3 </li>
    </ul>
</div>
, document.getElementById("root"))


===Functional Components===
You do not want to place your whole application in a render method

we can create functions that will take all of the necessary code to dreate the app

you just need to make sure to return the jsx Component you want rendered
e.g.

function MyApp()
{
    return
    (
        ....
        ....
        ....
    )
}

We can then creat an instance of our function in the ReactDOM.render() method bt placing the name of the Component in the method and wrapping it in a self closing jsx tag or a normal jsx tag

ReactDOM.render
(
    <MyApp/>,
    document.getElementById("root")
)

****When making JSX Components you must use pascal case which means a captial letter at the start of a new word***

same principle that if you want to return more than one element we can just wrap them in divs


Practice excersiese

Create a Functional Component called MyInfo and do the following
    1.An h1 with your name
    2.a paragraph with a blurb about yourself
    3. An ordered or unordered list of the top 3 places you wnat to visit
    4.rebder an instance of this Component onto your browser


===Moving Components to different files===

We can move Components into thier ownb seprarte files 
its a good convention to have each file have one Component

To do this we create a file with the same name as the Component and give it a js extenstion and copy the function into this file  however we must alos import react so that the computer will recognise the JSX code

FINALLY WE MUST EXPORT THIS Component USING EXPORT DEFAULT

export default MyInfo

then carry on as usaul

Another good convention is to have a folder with all the Components inside it

This folder must be inside the src folder however

You must then import this into your index.js file and call it in the ReactDOM.render method

 import MyInfo from "./Components/MyInfo"

 ReactDOM.render
(
    //This how we call the functional component
    <MyInfo/>,
    document.getElementById("root")
)


===Parent/Child Components===
Manyy components can render other components
for example in the Parent&Child folder

we are using app.js as our entry for our application
then we will render footer.js in this file

in order to render the footer file into our app.js

we should import it to create an instance of it

import Footer from "./Footer"

Then in the app.js app function we can 
create an instance of this app by creating a JSX component using JSX tags

function App()
{
    return(
        <div>
        <h1>Tomi</h1>
        {/**Creating a JSX component of footer */}
        <Footer></Footer>
        </div>
    )
}

****NOTE THAT JSX Components MUST GET CAPITAL LETTER AND WHEN BEING CALLED MUST ALSO HAVE A CAPITAL LETTER ASWELL****


===Parent Child Practice===
Render an app component
inside app render 
1. A navbar component
2. A maincontent Component
3. A footer Component

can be found in the parents&child folder


===Todo Phase 1===
render an app component
have the app component render 3/4 checkboxes with paragraphs next to it
have some hard coded items 


===Styling===

*****The first thing you must do is import the css file into your index.js file or whatever file you are using a a main entry point




Using class as a property name in jsx does not run 
instead we use className 

To starta we will use normal css like selectors on the classnaem of the components we want to style

function Navbar()
{
    return(
        <header
        className = "Navbar"
        >
            This is the header
        </header>
    )
}

you can only apply the className attribute to react elements not components created by you



The we can go to our style.css and select this class and style it like usaul

body
{
    margin: 0;
}

.navbar
{
    height: 100px;
    background-color: black;
    color: white;
    margin-bottom: 15px;
    text-align: center;
    font-size: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
}

===JSX to javascript and back===

How to use javascript while using JSX??

If you want to use javascript in a JSX function all you need to do is wrap the javascript in curly braces

e.g.

function JS()
{
    const firstname = "Tomi"
    const Secondname = "Ilori"

    return(
        <div>

            <h1>Hello{firstname + " " + Secondname}</h1> or  using es6
            <h1>Hello    {`${firstname} ${Secondname}`} </h1>
        </div> 
    )
}
ReactDOM.render(<JS/> , document.getElementById("root"))


===Inline styles with the style property===

JSX Expects that the style being called should be an object instead of a string a javascript object

This style object must be wrapped in curly braces again as we are in jsx smd to us any js we need to wrap our js in curly braces

 <h1 style = {{color:"red"}}>Hello Good {`${timeOfDay}`}</h1>

 We can not hvae dashes in the the braces so for example background-color changes 
 to a camel case version of backgorundColor

 To make multiple styles we just nedd to add another key value pair

      return(  
         <h1 style = 
         {{
             color:"red",
             backgroundColor:"blue"
        }}
        >
            Hello Good {`${timeOfDay}`}</h1>
         )

or you can create a variable and place the styles inside it and then call it in the style attribute tag e.g

because styles is property we can access properties using the . for example
styles.color = "green"


===Todo list phase 2====
place each item in its own todo component and then style it

To do this we created a component called todo item 
this took the basic form of one todo 

Then in our todo application we created multiple instances of this todo item

Then we gave both the todo and todoitems a classname for it to be styled 


===Props===

We can use props to modify how a component acts similarly to in html where certain elements have attributes to modify theyre behaviour

Ecah contact card has three pieces of dynamic information and we want to treat them as parameters in a function

We can name the properties ourselves 
e.g.

<ContactCard
            name="Tomi Ilori"
            img = "https://source.unsplash.com/1670x900/?dragon"
            phone = "08725891"
            email = "BobToss@Gmail.com"
        />

We need to be able to access the data being passed down 
to do this the actual contacxt card function or any function should take in a parameter called props

onec you pass in the props parameter you can now set the certain values to these properties that you create din the main application of the app


function ContactCard(props)
{
    console.log(props)
    return(
        <div >
            <img src = {props.img}/>
            <h3>{props.name}</h3>
            <p>Phone:{props.phone}</p>
            <p>Email:{props.email}</p>
        </div>
    )
}

****NOTE THAT THE NAMES IN THE PROPS. STATEMENT MUST BE THE SAME AS THE VALUES PASSED IN THE Component******

You can also do this using an object in the case that there are still a lot of values 

sp we can create the object using double curly braces and then place all the properties we wnat to use 

   <ContactCard
           contact =
           {{
               name:"Tomi Ilori",
               img: "https://source.unsplash.com/1670x900/?dragon",
               phone: "08725891",
               email:"BobToss@Gmail.com"
           
           }}
        />

as we are now passing an object into the contact card we cannot use the props. style of manipulating properties

so we must now say props.contact.name etc 

function ContactCard(props)
{
    console.log(props)
    return(
        <div >
            <img src = {props.contact.img}/>
            <h3>{props.contact.name}</h3>
            <p>Phone:{props.contact.phone}</p>
            <p>Email:{props.contact.email}</p>
        </div>
    )
}

===Todo app Phase 3===
We will use mapping to make teh todos application more dynamic

we must import the data from the todosdata file in order to produce the todos
and assign it toa variable 
The rest you can rfeer to the video 


===Class based Components====

When cretaing a class we use The class keyword
then the nam eof the class and then let it extend 
React.Component and then place the render method inside od it along with our required code

class TheAppClass extends React.Component
{
    render()
    {
        return(
            
        )
    }
}

export default TheAppClass

You must import and export ths classes in the same manner you would do with a functiona

any kind of diaply logic or cinditions can be placed in the render method 

You can also create your own methods within a class and call them from within the render method 


and you can call this methid by using the this.method_name
e.g.

class TheAppClass  extends Recat.component()
{

    yourMethodName()
    {
        ...
        ...
        ...
    }


    render()
    {
        this.method_name()

        OR IF YOUR METHOD RETURNS SOMETHING

        const method = this.method_name
        return(
            ....
            ....
            ....
        )
    }
}

===State===

State is the data a component maintains which can be chnaged by value

ANy time we intoriduce state into a component it needs to be class based

To start we must add a constructor method to our class this will be a place where we will be initialising some values


and then we must make a call to the global function called super this goes to the parent class and brings down a few methods for exapmle setState

The final thing to do is to add a property called state and this state is an object that can be referneced anywhere

class StateApp extends React.Component
{
    constructor()
    {
    super()
    this.state = {

        answer : "yes"
    }


    render()
    {
        return(
            <div>
                <p>Is state important to know</p>
            </div>
        )
    }
}

This state can be referneced by saying 
this.state.answer in the div 

 <p>{this.state.answer}</p>

 Note that it is wrapped in braces cause it's in JSX

 If we ever change the state of a properties react will automatically update ay child component recieveing that state

 ==STATE PRACTICE==
 
 Given an incomplete class-based component without a constructor, add a constructor and initialize state to fix the brokem component


*****Solution*****
 class StateAppPractice extends React.Component
{
    //The constructor is called which takes in a super eiht the react component methods
    //
    constructor()
    {
        //Super takes react component methods
        super()
        //This is our state which is esstenially where are properties are stored this is done in an object
        this.state =
        {
            name:"Tomi",
            age:20
        }
    }

    //This render method returns the display the logic to the wbepage
    render()
    {   
    return(
        <div>
        {/**this.state.name allows you to grab the value of the property specfied */}
        <h1>{this.state.name}</h1>
        <h3>{this.state.age} years old</h3>
        </div>
    )
}   


==State Practice 2===

Given a stateless functional component add state to it 
state should haev a property called loggedIn ehich is a boolean
true if logged in false otherwise
then render hte word in if the user is logged in or out if the user is logged out


***before solution****

function StateAppPractice2()
{
    return(
        <div>
            <h1>You are currently logged (in/out)</h1>
        </div>
    )
}


**Solution**
class  StateAppPractice2 extends React.Component
{
    constructor()
    {
        super()
        this.state = 
        {
            loggedIn: false,
            userState: "in"
        }

        if(this.state.loggedIn == true)
        {
            this.state.userState = "out"
        }
        else
        {
            this.state.userState = "in"
        }
    }
    
    
    
    
    render()
    {
    return(
        <div>
            <h1>You are currently logged {`${this.state.userState}`}</h1>
        </div>
    )
    }
}

***Todo App part 4***
We will want to modify the data in the todo app so we must have it exist in state

To do this we must change the function into a class as you usally do

Then we must add the state and refernece to the todosdata array by creating a property called todos also we must change todosdata.map to this.state.todos as this is where the information for the todos resides


class Todo extends React.Component
{
    constructor()
    {
        super()
        this.state = 
        {
            todos:todosData
        }
    }
  
    
    render()
{
     //We will map the inofrmation from todos data into a new array returning a new item at the same time we will make a new todoitem passing in the todos that are read from this array as a prob to the todo component as an object hence te use of curly braces
    const todoitems = this.state.todos.map(item => <TodoItem key = {item.id} item = {item}/>)
    return(
        <div className = "todo-list">
            {todoitems}
        </div>
    )
}
}



***Event Handling***

Allows user interactivity 

event handlers are the javascript ones e.g. onClick


https://flaviocopes.com/react-events/ react event list

remeber that javascript must be in curly braces as you are using JSX 

function Event()
{
    return(
        <div>
            <img onMouseOver={() => console.log("Hovered over image")} src = "https://source.unsplash.com/1670x900/?mouse"></img>
            <br/>
            <br/>
            <button onClick = {()=> console.log("Button Clicked")}>Click Me</button>
        </div>
    )
}

***Todo phase 5***
correcting the checked prop by adding a onchange to the checkbox

function TodoItem(props)
{
    console.log(props.item.title)
    return(
        <div className = "todo-item">
        <span> {props.item.title} </span>
            <input type = "checkbox"
            checked ={props.item.completed}
            onChange = {()=> console.log("Checked")}/>
        </div>
    
    )
}


===Changing State - ChangeStateApp===

To chaneg the state we must again use veent handlers 

You do not want to ever directly modify the state you replace values using 
setState method from React Component 


Any time you create a class that you want to change state on you need to bind the method to the clas using the bind method 

This is done inside the constructor for example

this.handleClick = this.handleClick.bind(this)



    constructor()
    {
    super()
    this.state = {
        count :0
    }
    //Binds the method to the class makeing it usable
    this.handleClick = this.handleClick.bind(this)
    }




this method can take in two ways of changing state 

1. You can pass a new version of state as this is just a object you can pass a new object with new values



2.A function that takes the previous state as a parameter and returns the object literal that returns the new version of state this is the better way of doing things

you can use prevState which will kepp the previous state and allow it to be an arrow function that returns the desired action within the braces

   handleClick()
    {
        this.setState(prevState =>
            {
            return{
                count:prevState.count + 1
            }
            })
        
    }


You are aslos allowed to pass state to other components down as props e.g.

<ChildComponents count{this.state.count}/>

===Todo Phase 6==

Lets make it so our checkboxs can actually mark our todo as complete or incomplete

1. create an event handler in the todo component for when the checkbox is clicked 
2. pass the method down to the do todoitem component
3. in the todoitem component make it so when the on chnage event happens it calls the handle change method and passes the id of the todo into the function 


First you must create the handleChange method this takes in an id property fo the tasl

handleChange(id)
{
    
}




Second you must bind this method in your class component

class Todo extends React.Component
{
    constructor()
    {
        super()
        this.state = 
        {
            todos:todosData
        }

        this.handleChange = this.handleChange.bind(this)
    }



third You must add the handleChange method to the todoitem being created when the array is mapped using this.handleChange

<TodoItem 
        key = {item.id} 
        item = {item} 
        //Passing in the handle change
        **handleChange = {this.handleChange}***
    />)

Fourth in todoitem it now receives a prop called handleChange

events when they fire give an event object so instead we create a function that callkes this handleChange prop and inside this we can pass in the task id


 onChange = {()=> props.handleChange(props.item.id)}/>

 Fifth To update the state we need to deal with the entire array 

 we must return a brand new array apart from the item that is being changed 

 to do this the .map method is the best approach

 all this must be within a set state method

 this.setState(prevState =>
        {
            //This will be the old version of the todos and look through it howvwer using the map method we are creating an updated array
            const updatedTodos = prevState.todos.map(todo =>
                {
                    //Here we are sying if we have an item that matches the id of the item clicked we will change the completed value to the opposite of its current value
                    if(todo.id===id)
                    {
                        todo.completed = !todo.completed
                    }
                    //We will retun the todo which will be  in the same index as the previous state
                    return todo
                })

                //The set state actually need to return the todos but will equal the new verison of todos that we cretae
                return{
                    todos:updatedTodos
                }
        })






 sixth
 inside this map method we must checj if the todo item being selected has a matching item in the array and if there is we chage its completed state and return it to the position that is was orginally in


  if(todo.id===id)
                    {
                        todo.completed = !todo.completed
                    }

  //We will retun the todo which will be  in the same index as the previous state
                    return todo


 seventh
 finally we need to just return the updated todos list

                //The set state actually need to return the todos but will equal the new verison of todos that we cretae
                return{
                    todos:updatedTodos
               


===Lifecycle Methods===

https://engineering.musefind.com/react-lifecycle-methods-how-and-when-to-use-them-2111a1b692b1



1. render() method - Getting dressed for the day , its job is to determine what gets rendered to the screen creating the display for a component. It can be called as many times as possible

2. componentDidMount - you were just born , this runs when a component is rendered to the screen , it only renders the one time the most commmon use is for an API call for getting data from an extenral source

3. componentWillReceiveProps - when someone gives you a gift , everytime a component receives props this method will be ran . it will run whena component is rendered and also when -deprecated


4. shouldComponentUpdate - making a decision to change clothes , if react has a question as to wheteher a component needs to be re-rendered it will alwways re render it 
this can take two parameters 1.incomingProps , 2.nextState and in the body we can return true if we do want it to updata and return fa;se if we don't want it to

5. componentWillUnmount - all good things must come to an end , the main use of this is to reduce clutter before the component disappears





 new Lifecycle methods

1. getDerivedStateFromProps -  this is a static method needs static beofrehand , takes in two variabls props and state and returns a new updatetd state acording to the props - used if rare cases where a component takes props from a parent and sets its own state with these props 

2.getSnapShotBeforeUpdate - This method allows you to create a backup o fthe way things are with the application , it saves an object with multiple points of data in it


===Conditional Rendering===

used to display something on the screen to tell the user that something is loading in the background

Explained in the code of the conditional rendering folder


You can also use tenray opertors for these methods

condition ? statement : else statement

The & operator can be used to render somthing if a condition is true or render nothing if it is false


/**Condtional practice
 * Given a stateless functional component
 * add state to it 
 * haev the satte keep trak of whether the user is logged in/out
 * add button that logs the user in/out
 * make button display log in if theyre logged in and out if theyre logged out 
 * display logged in/out 
 */


function ConditionalAppPractice()
{
    return(
        <div>
            Code Goes here
        </div>
    )
}


===Fecthing Data from an APi===

To start we must create a class to manage and use state


class Fetch extends React.Component
{
    constructor()
    {
    super()
    this.state = {
        
        Users:[]
    }
   
  
    }


The state in this this class has a Users property this property is set to equal the data type that will be read in , in ythis case we will be reading in an array



We will use the Fetch method for getting http requests 
Also using the json placeholderfor dta collectiuon
https://jsonplaceholder.typicode.com/users


We will start in the componentDidMount mwthod 

we will use fetch this is a global function so it should just work
going inside the parentheses is the url to where the data is located

fetch("https://jsonplaceholder.typicode.com/users2")
you must then resolve the promise by using a .then() 
this .thn has a response parameter that must be converted to either a js object or string
then we can use another .then and then console.log or do whatever with thw data obtained ,
in this case we will set the Users property state in our class to the data that is being brought in useing this.setState

fetch("https://jsonplaceholder.typicode.com/users")
.then(response => response.json())
.then(data=> console.log(data))


 componentDidMount()
    {   
        
        fetch("https://jsonplaceholder.typicode.com/users")
        .then(res => res.json())
        .then((data)=>
        {
            this.setState(
                {
                    Users:data
                }
            )
        })
       

    }

In our render method we use return our data seeing as we can only return one element it is best to return everything within a div tag

to access the array we must create a new array mapping across the array in our class 
the .map() returns an element in this case we will return a object along with a function each time an object is read

***When going through an array of  elements in React we must give each element a key this is why the div has a key value of User.id a key is used by react to dentify which items have changed, are added, or are removed.

You cann then refer to eaach property in this object doing it the same way you would usaully through dot notation



    render()
    {
        
       console.log(this.state.Users)
        return(
            <div>
              {this.state.Users.map(User=>
                <div key ={User.id}>
                    
                   User Id: {User.id}
                   <br/>
                   User Name: {User.name}
                   <br/>
                   User Username: {User.username}
                   <br/>
                   User email: {User.email}
                   <br/>
                   User phone: {User.phone}
                   <br/>
                   <hr/>
                </div>
                )}
            </div>
        )
    }





****WHEN YOU USE CONSOLE.LOG(THIS.STATE.USERS) YOU GET TWO VALUES PRINTED OUT THIS MAY LOOK LIKE YOU HAVE TWO VALUES BUT YOU ONLY HAVE ONE componentDidMount WILL CALL THE RENDER METHOD EVERYTIME STATE HAS BEEN CHANGED THAT'S WHY YOU WILL GET AN EMPTY ARRAY AND THEN AN ARRAY WITH 10 ELEMENTS*****

I also included a loading feature which is explained in the code

===Forms===




In react we listen for every change of state on the form 

As state is involved the function relating to this form must be a class function

the form is called similarly to html by using the form tag

To listen for change within a form each input has an event listener called onChnage and every time this is called we will have afunction run 


 return(
           <form>
               <input type ="Text" placeholder = "Enter First Name..." onChange = {Handle}/>
           </form>
        )


In this handlw method we want to do two things

 //1. we want to grab the current value of the input box
        //2. update state to reflect the current value of the input box is 


To start we must go back to our state object and add a property of firstname

 this.state = {
            Firstname: ""
        }

        To update we then go into the handle method and use this.setState

        we can let first name be set to evemt.target.value

in javascript when events happen an event is triggered which has valuebale information for example the vlaue of the element being targeted when his change occurs 

****You must passs in the Event into the funciton to make use of it******


Handle(event)
{
    this.setState({
        firstname:event.target.value
    })
}

***You must also Bind the handle method to your constructor ***

this.Handle = this.Handle.bind(this)

If you have multiple fields that you want to manage the state of you can just add a name property in the inputs taht match waht the state is 

The event that is being shot off can also grab the name property of the input object as the event has the event.target which grabs the name property of this input and sets it in our this.setState method to match this input object

adding the name property

<input type ="Text"  name = "firstname"placeholder = "Enter First Name..." onChange = {this.Handle}/>
               <h4>{this.state.firstname}</h4>


getting the name of the targeted input field and changeing its value 
    this.setState({
    [event.target.name]:event.target.value
    })


    This works on any text based input fields

in react the textarea element is self closing tag 
if you want a default value just add the value attribute


Chcek boxes are either checked or unchecked this has a property called checked which is a boolean esstenially meaning that checkboxes use booleans when messing with state

To make the checbox intercatable we can still use the same handle method but must check that is a checkbox we are working with 

To this we can pull the type from the event.target and then use a condtion to check if it is a checbox or not if it is we grab the name of the checkbox and then allow the state property to be the current value of checked


if(event.target.type ==="checkbox")
{
    this.setState({
        
    [event.target.name]:event.target.checked
    })
}

Done within the handle method

Radio buttons use a checked property and a value property

You can give the same name to multiple radio buttons to tell the DOM that is one or the other one

radio buttons jobs arent to maintain a truth or false value

They are checked if by manipulating the state in the class

<input 
                    type = "radio" 
                    checked={this.state.gender === "female"}
                    name = "gender"
                    onChange = {this.Handle}
                    value = "female"
                />Female

                where the state poseses a property called gender

Select box can use the value attribute to manage state and can determine what is chosen

 <select
                value = {this.state.favColor}
                onChange={this.Handle}
                name = "favColor"
                >
                    <option value = " Pink">Pink</option>
                    <option value = " Yellow">Yellow</option>
                    <option value = " Black">Black</option>
                    <option value = " Red">Red</option>

                </select>


Works the same as the other input types 

buttons within a form automatically becomne a submit button that call an onsubmit method this method needs a function to call

Go back and do the forms example in this video
Then do the meme project

