
===Getting started=====
Express js is a web framework for node js
to start we must create the package.json file using npm init --yes

Then  install express
npm i -g Express

working like node we must use require to bring express into our project

This module returns a function that must be called 
express()

This function will return an object with plenty of uasble methods
so it's best to store in a variable
const app = express()

the get method is then used 

This takes 2 arguments
1. Route
2. req,res call back

app.get('/' , (req,res)=>
{
    res.send('Hello World')
})

we then need to give it a port to listen too

app.listen(5500)


if you use localhose:5500 it works


 ===Working with express get requests===

--Route Parameters---
can be used ot get data from the user

Yo can pass Parameters into the route of the get method 
and when This occurs you can then pass these Parameters into the url adn tey are sent back to the server

app.get('/example/:name/:age', (req , res)=>
{
    console.log(req.params);
    res.send('example with route params')
})

This returns an object with the values of age and name

however the req becomes an object itself with the propertty of params
which in turn store the Parameters passsed into the url

app.get('/example/:name/:age', (req , res)=>
{
    console.log(req.params);
    res.send(`Your name is ${req.params.name} and you are ${req.params.age} old`)
})


--Query string Parameters--
A query string can be used to create a new Parameters and assifn a value to it 

to do so you need to add a '?' to your url and then the naem of the property and then an '=' to assgin the value nad press enter

http://localhost:5500/example/Tomi/21?Adress=269


if you want to add multiple values you can use the '&' symbol

http://localhost:5500/example/Tomi/21?Adress=269&street=mtEustace


Route paramaters should be used when you must have the data being used query string paramaters are only to be used when you want to give and optional data



===Serving static file susing express==

To start we will require the oath module this helps make life easy
const path = require('path)

You must tehn use the use method this method means you are using middleware

This method takes on a few arguments
1.The alias - to hide the folder name
2.A middleware function called static  that express provides us that leads you to the folder and this takes in the directory name and actual name of the folder in this case being static
3.

app.use('/public', express.static(path.join(__dirname , 'static')))

This is the same process with images video mtEustace


====HTTP POST Request with express and body parser module===

This is usally done with forms

The form action requires a route and the form method should be post
jsut like using struts2

in the app.js we msut use ther body parser module to parse the information for us

we must first install using npm intsall body-parser

then we must require it into or app

then use the app.use method with the following statement

bodyParser.urlencoded({extended:false})

this becomes

app.use(bodyParser.urlencoded({extended:false}))

it parses the data to us and attaches it to the request body

however the data being parsed onto this body must have a name attribute in the html file 

app.post('/' , (req , res)=>
{
    console.log(req.body)
    res.send("Data Saved")
})


====EJS Templates with express==

EJS is a template language that can help write more dynamic websites

We want to be able to use nay html file and use it as a template for serving dynamic data

The way we get this done is by setting the view of our express application using app.set() method

this takes two parameters 
1.The view-egine
2. The Template you want to use being "ejs"

app.set("view engine" , "ejs")


We must create a folder called views and this helps us store our ejs Templates

in this folder the files being used for templates take an .ejs extension

You can take the code in the relevant html file and then paste it into the .ejs file

you can write html in this file

What we do with templates is that we render them to the user

so instead of sending a static file we will use 
res.render() with the name of the file needed to be rendered you do not need to specify the extension this is done withing the get method

app.get('/' , (req,res)=>
{

    res.render('index')
})

if you ever get cannot find module ejs error it means you need to install the module into your project folder 

The server will then search for ejs code and then will execute it amd sedn back an html file

 - Send Data -

 To send data 
 we can give a route paramater in the app.get method

 app.get('/:UserQuery', (req , res)=>
{
   ...
   ...
   ...
})


then within the render mwthod we can pass in an object and this is the data we want to display this data should have a propertty called data which in turn has a property of an object and this object can have variables but must have a propertty matched to it that is gotten from the req object

app.get('/:UserQuery' , (req,res)=>
{

    res.render('index' , 
    {data:
    {UserQuery:req.params.UserQuery}
    })
})

==Express Routers==
What this allows us to do is seperate our routes innto different files


To do this we can create a folder ot store all our routes
and then a file to store the routes

then we must include the express module

const express = require('express')

Then create an express router object and store it within a variable

const route = express.Router();

then we must set up our route using this variable

route.get("/" , (res , req)=>
{
    res.send('/ being hit)
})

we must then make it exportable using module.exports

module.exports = route

Then your main appp file you should require the people route

const people = require('./routes.people')

now we need to tell the express apploication that were using the people route by using the app.use method passing in the file nad the people variable in

app.use('/people' , people)

Using "/people " makes that your base page