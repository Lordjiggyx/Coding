Esstenially this project is a full stack porject working from the back to the front using 
MongoDB , Express and nodr.js




====Part 1 Getting started====

To start you want to create a package.json with npm init -y in the folder where the application is

Then you want to create the main file called app.js

we can add our scripts to the package.json in order to run our application

"start": "node app.js",
"dev": "nodemon app.js"

**nodemon installed with other dependencies****

---Dependencies---

Express will be the first dependency we add

we will use npm i --save express

this will create a folder called node_modules

we can then install nodemon npm i g nodemon
and use npm run dev to start it 

**Testing express**

Go into the App.js and require express and create a variable for it called app to represent express

//Brininging in the express module
const express = require("express")

//We need an object to represnt our express app
const app = express();


we can now create routes using app._Method_Type e.g post get 

app.get("/" , (req , res)=>
{
    ....
    .....
    ......
})

then we must use the app.listen to listen out on a particular port

///This tells the application to listen on the value of whatwvwer we assigned to port
app.listen(port , ()=>
{
    console.log(`Server Started on port ${port}`)
})



====Part 2 Pug Template engine====

we will first require path from npm 

const path = require('path')

we will use npm i --save pug to install pug

in our app.js 

we can take our app variable and use .set()

we want to point to the folder where the views will be kept

to load the veiws engone we will pass in views and then use path.join path.join will take in the current directory using __dirname and then a folde rcalled views

app.set("views", path.join(__dirname, "views"))

then we can set this to pug 

app.set("view engine , "pug")

we can then create a folder called views
and in this folder create a file called index.pug

**Every view will have a pug extension***

in this file we can type 

h1 Hello World

then going back to our app.js we change the res.send() to res.render in the app.get method and let it take in index.pug


app.get("/" , (req , res)=>
{
    res.render("index.pug")
})

****
PUG

Pug works on indentation no tags 

for example 

html
    head
        title Tomi Ilori's World
    body
        h1 This is my World

This is kinda like python 

we can pass values ot the template 

if we go to the res.render we can send an object  by ading it to the render parenthese

app.get("/" , (req , res)=>
{
    res.render("index.pug"  ,
    {
        title:Jiggy's World
    })
})

then in our index.pug we can use #{Variable_name} and then this will take in the variable values
****


We then create the route for the pagfe that will be used for creating articles

app.get("/articles/add" , (req , res)=>
{
    res.render("add.pug"  ,
    {
        title:Add articles
    })
})

in views we create a new file called add.pug

and use the same pug template from index.pug 

and if we use http://localhost:5000/articles/add we'll see the page changes


The code in these views are repetitive so what you want to do is create a layout and extend it in eaxh view so you do not have to repeat yourself

To do this we will create a file called layout.pug in the views folder

and then copy the same pug code from the index.pug into it 

but whereevr we want to output the view we want to indent and type block content

html
    head
        title Tomi Ilori's World
    body
       block content
       br
       hr
       footer
        p Copyright &copy; 2019

in our index.pug we will type 

extends layout

then type block content
then what ever we wnat in it and you can now seeing it extends the layout


we can add control statements to pug useing loopd snf if statements to test this we will create an empty array 


let articles = [
    
   { id:1,
    title:"A1",
    User:"Template",
    body:"This is article one"},
   { id:2,
    title:"A2",
    User:"Template",
    body:"This is article two"},
   { id:3,
    title:"A3",
    User:"Template",
    body:"This is article three"},
    
]

we can pass more then one thing in  

we then go to the route for the index and set the index to equal This array

app.get("/" , (req , res)=>
{
    res.render("index.pug"  ,
    {
        title:"Home page",
        articles:articles
    })
})

we can then go to our index.pug and loop through using each

underneath the h1 we can type

ul
    each article, i in articles
        li= article.title



====Part 4 - MongoDB & Mongoose====

Rather then using command line for the MongoDB i'm going to use MongoDB compass as it makes htings much easier 

Create a databas and a collection called articles 

create article objects with the attributes title author and body

To start connecting the app to the database we need to install and require mongoose 

Go into the terminal and then intall monogoose as a dependency using 

npm i --save mongoose

Then we go to app.js and require mongoose
const mongoose = require("mongoose")

then to connect to database we use mongoose 

monogoose.connect('mongodb://localhost/MER')

then we must make a database object that can be used in the app

let db = mongoose.connection


Then we create a new folder in the project called models and then creat a file called articles.js , models allow us ot give infrastructure to our database

we must first require mongoose

//requiring mongoose modules
const mongoose = require("mongoose")

then we must create a schema 

let articleSchema = mongoose.Schema(
    {

    }
)

inside this schema we can define our objects fields and whether they're required or not

let articleSchema = mongoose.Schema(
    {
        title:
        {
            type:String,
            required:true
        },
        Author:
        {
            type:String,
            required:true
        },
        Body:
        {
            type:String,
            required:true
        }
    }
)


Now we will createa  varical ecalled Aritcle and set it to modules.exports and then set it to mongoose.model() and this takes in the name of the model being article and the schema being articleSchema

let Article = module.exports = mongoose.model('Article' , articleSchema)

we then need to go into our app.js and bring in our models

let Article = require("./Models/articles")

we cam mow use the article variable

now going to our home page we can use 

Article.find()

this takes in a query and a function

seeing as we want all of the objects this can be left as a empty {}

the function i use is an arrow function this will take in err and then the response being articles

(err , articles)=>
{

}

so together this lookes like 

 Article.find({}, (err , articles)=>
    {
        
    })


we can then take our res.render and place itinto this function we also want to check and console log any errors 

 Article.find({}, (err , articles)=>
    {
        res.render("index.pug"  ,
        {
            title:"Home page",
            articles:articles
        })
    })

===Part 5 - Add articles to database====

We eill start in our add.pug file 

we ill create a form underneath the title setting themethod to post and the action to the corresponding route in the app.js for adding articles

form(method = "POST" , action="/articles/add")

Seeing as we will be using bootstrap we will use form control 


we will then create the fields 
#form-group
            label Title
            input.form-control(name="Title" , type="text")

            we will copy this for the aother fileds

The body gets a text area so no need for a type

to create a submit button we use input and set the type to submit along with the bootstrap classes btn btn-primary

input.btn.btn-primary(value="Submit" , type="submit")

as we are submitting a post request we create a route with a post method and in here we will handle the creationn of a new app 

we need to install body-parser first

npm i --save body-parser

once this is install we must require it 

const bodyParser = require("body-parser")

we need add middleware for this 

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))
 
// parse application/json
app.use(bodyParser.json())

we can then create an artcile object using the model that we imported 

let article = new Article()


Then we can assign the artcile fields to equal the fields passed into the form
article.Title = req.body.Title
    article.Author = req.body.Author
    article.Body = req.body.Body

we can then call the save method on the article object
check for an error and if there isn;t one redirect to home page where the metohd in that page will render all the artilces including the new one

 article.save((err)=>
    {
        if(err)
        {
            console.log(err)
            return
        }
        else
        {
            res.redirect("/")
        }

    })