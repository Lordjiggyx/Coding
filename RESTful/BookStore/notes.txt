This is a restful web api

This is the backend purely 
in this i want to make requests to get data

The project is modelled after a book store

kind of requests that we want ot make 
get 
put 
post 
delete

This is done from scratch

This will be using Node.js ,express.js and MongoDbnn

To interact wth the database we will use mongoose
This is a node npm module 

The app.js will serve as the main gateway for our application

as we are using mongoose it is best we create models for our data i.e a models folder

We must also create a package.json file cam create this going ot the project directory and say npm init -yes

in the package.json file we need to specify our dependicies wihc are the nodemodules we want ot use in the app this is an object 

 "dependencies": {
    "body-parser": "*",
    "express": "*",
    "mongoose":"*"
  }

  body parser allows us to submit formas and make post requests and get values from the form

  To install the dependencies we can just use "npm i"

  Next we will go into App.js and require the things we need being express 

const express = require("express")
const bodyParser = require("body-parser")
const mongoose = require("mongoose")

express needs an object to represent it beinf the app object in the file


Next we must connect to mongoose using mongoose.connect()
in here we must pass in the location of the mongodb

mongoose.connect("mongodb://localhost/bookstore")

Then an object representing the database must be created 

const db = mongoose.connection()

You then set up a route and a port for the app to run on


app.get takes in a request and responnse object and res.snd acn be used to send responses

app.get("/", function(req , res)
{
    res.send("Hello Word")
})

app.listen just takes in a port number

app.listen(3000)
console.log("Runing on port 3000......")


*****To get areound having to turn the server on and off consantly you can just use nodemon  to di this you must first use npm i g nodemon and then go to your package.json in this file you must create a scripts object and create one called "dev" and let it be assigned to "nodemon app_name" then in the command line you type "npm run dev"

We will then create our database in mongodb you can do this through command line or through compass i will do command line 

To do this you must go to the location of where mongodb is stored and then go to the following directory

mongodb/server/4.0/bin 

and then run mongo

to create a new database allo you have to do is say use database_name in this case

use bookstore


we must then create collections books and generes using the db.creatCollection() function

 db.creatCollection("books")
 db.creatCollection("generes")

we can now create generes
These generes will be JSON objects 
The Id will be generated automatically

for exmaple a suspense genre

db.generes.insert(
    {
        name:"Suspense"
    }
)

To add a book we must change to db.books thenuse the insert command

db.books.insert(
    {
        title:"The Murder House",
        generes:"Suspense",
        description:"A scary tale about a murder scene in a murder house",
        Author:"James Patterson",
        Publisher:"Brown & Company",
        Pages:"480",
        Image:"https://www.googleadservices.com/pagead/aclk?sa=L&ai=DChcSEwiOzo7zz8XjAhVBsO0KHSwfBHUYABACGgJkZw&ohost=www.google.com&cid=CAESEeD2XjIC5rhvmcF7mlgj19pP&sig=AOD64_1LIL8z8yJBScUTPGcXdtCmL85acg&ctype=5&q=&ved=0ahUKEwj0_4bzz8XjAhWOh1wKHQT9AmYQ8w4I1QE&adurl=",
        PurchaseFrom:"https://www.amazon.co.uk/Murder-House-James-Patterson/dp/0099594889/ref=sr_1_1?adgrpid=64054071971&gclid=CjwKCAjwmtDpBRAQEiwAC6lm46h179R73yU6sfYMZ51_A47g2RlMYWa4iYPHxPg5rvKmszma9x2RRhoCt4wQAvD_BwE&hvadid=291319618479&hvdev=c&hvlocphy=1007850&hvnetw=g&hvpos=1t1&hvqmt=e&hvrand=10524570076384761575&hvtargid=kwd-317386764855&hydadcr=1234_1846193&keywords=james+patterson+the+murder+house&qid=1563698868&s=gateway&sr=8-1"
    }
)

db.books.insert(
    {
        title:"Truth Or Die",
        generes:"Suspense",
        description:"Truth or die",
        Author:"James Patterson",
        Publisher:"Brown & Company",
        Pages:"480",
        Image:"https://images-eu.ssl-images-amazon.com/images/I/51fKWIFTcUL.jpg",
        PurchaseFrom:"https://www.amazon.co.uk/Truth-Die-James-Patterson-ebook/dp/B00SPIK8FG/ref=sr_1_1?adgrpid=58281152597&gclid=CjwKCAjwmtDpBRAQEiwAC6lm42P3bxvE_2g636vELCn4psjFJfuovbPtEJv8SDZLVZfzEf51zsVXdhoCBWAQAvD_BwE&hvadid=291385348703&hvdev=c&hvlocphy=1007850&hvnetw=g&hvpos=1t2&hvqmt=b&hvrand=8030840858208674006&hvtargid=kwd-305661519543&hydadcr=1209_1846145&keywords=truth+or+die+james+patterson&qid=1563699063&s=gateway&sr=8-1"
    }
)

Now we want to create a route to our generes


app.get("/api/generes" , function(req,res)
{
    
})

We must create our models in in the mongoose_models folder

in this folder we create a books.js and generes.js


in both files we must require the mongoose api

we must then cretae the mongoose schema 

a schema is just for the application 

This takes in objects with all the fields we want to use 

const generesSchema = mongoose.Schema(
    {
        name:
        {
            type:String,
            required:true
        },
        create_date:
        {
            type:Date,
            default:Date.now
        }
    }
)

we then make it exportable using module.export
we must also let it equal to the mongoose_model which takes in the name of the schema and also the schema ojeect we created 
const genere = module.exports = mongoose.model("Genere" ,generesSchema)

We can then create a function to get generes or books 
it needs to be exportable as well

but at the same time we cna also let it equala a function and this function will take a callback and optional limit

module.exports.getGeneres = function(callback , limit)
{
    
}


inside we can call the genere.find() method which will take in a call back and the limit objetcs specified in the function paramters

note ****The genere.find is being called on the exportableobject we created***

Now we can access this function from the route

Going back to the app.js file we must now include the file through a variable

Genre = require("./Mongooe_Models/generes")

now in the app.get hthat point to our generes page we can now use the genere object

Now using the Genre object we can call the getGeneres method that we created for it This method will return a callback whihc is just a function this function will take in two paramters err and the name of the collection you wish to return in this case generes

 Genre.getGeneres(function(err , generes)

Then we can say if there is an error ist should throw the error message

  if(err)
        {
            throw err
        }

but if there is not an error we will use the responnse objetc res to send us the JSON object being the generes collection

 else
        {
            res.json(generes)
        }
    })

Final method call looks like this 

app.get("/api/generes" , function(req,res)
{
    Genre.getGeneres(function(err , generes)
    {
        if(err)
        {
            throw err
        }
        else
        {
            res.json(generes)
        }
    })
})

The structure is the same for books we just have extra fields

We now want to grab a single book so we want ot be able to grab the book by book id from the url by using /book_id

To do this we can write the model function in the book model

Seeing as we are only grabbing one book and also grabbing it by id we can remove the limit paramter and include an id paramter

**Mongo actually has a commmandcalled findById ***

module.exports.getBookById = function(id,callback )
{
    book.findById(id , callback) 
}

we will now go back to app.js and then create another route for this method

app.get("/api/books/:_id" , function(req,res)
{
    Book.getBookById(req.params._id , function(err , book)
    {
        if(err)
        {
            throw err
        }
        else
        {
            res.json(book)
        }
    })
})

note**
In the app.get() note thatwe also add another slash taking in the id paramter it is _id because that is what it is in the database we then also change anything that is books to book as we are returning a single book object

We then calle the getBookById method and in this method we will pass in the id from the request obkject req this object has a params object containing many fields one of these being the ID which we return along eith the same function we were using earlier

note**


==Adding an object==

Starting with genere object

To add an object we add another module in the generes.js file called addGenere

In the function for this module it will take in a genere object which will be obtainable data from the form

we will also change the command for the genere object from find to create which will make a new genere object in this case it will take in a callback

note that we aso remove the limit


module.exports.addGeneres = function(callback)
{
    genere.create(callback)
}

Then back in the main app.js 

and esstenially crete a new route for adding a book , the URL can be the same as long as the request is different in this case it is app.post


first we create a variable that will allow us to acces evrything that comems through the form and through body-parser we will be able to put it in a generes object

let genere = req.body

We will then call the addGenere method from the genere.js class
then we will pass in this genere object into the function and use the same conditional

 Genre.addGenere(genere, function(err , genere)


 final code looks like

 app.get("/api/books/:_id" , function(req,res)
{
    let genere = req.body
    Genre.addGenere(genere, function(err , genere)
    {
        if(err)
        {
            throw err
        }
        else
        {
            res.json(genere)
            
        }
    })
})



To test this we will have to make a post request using the rest easy chrome extension

to use this you must first copy your application url and insert it in the url field

change the method to post

Then in the headers you must add in the content type being "application/json"

and in the body we will send an object ***Key must have quotes***

we must also initialise the body parser 


app.use(bodyParser.json())

then you can call the post request in the rest easy app

It is the same procedure with the book


app.post("/api/books"  , function(req,res)

module.exports.addGenere =function(callback)  {
	genere.create(callback);
}

{
    var genere = req.body
    Genre.addGenere(genere, function(err , book)
    {
        if(err)
        {
            throw err
        }
        else
        {
            res.json(book)
            
        }
    })
})

The object in being added
{
	"title":"Harry Potter",
    "generes":"Thriller",
    "Description":"A book aabout a wizard orphan",
    "Author":"j.k.rowling",
    "Publisher":"Warner",
    "pages":"1550",
    "image_url":"https://www.google.com/imgres?imgurl=https%3A%2F%2Fcdn.shopify.com%2Fs%2Ffiles%2F1%2F0221%2F1146%2Fproducts%2FPhilosophers_Stone_Paperback_large.png%3Fv%3D1554383918&imgrefurl=https%3A%2F%2Fwww.harrypotterplatform934.com%2Fproducts%2Fnew-edition-harry-potter-and-the-philosophers-stone-paperback&docid=iBMfRL2sI_UIDM&tbnid=TI_aWefOW4ArmM%3A&vet=10ahUKEwir7ee5lsjjAhUiDmMBHZY0BQQQMwiDASgCMAI..i&w=422&h=480&bih=852&biw=959&q=harry%20potter%20books&ved=0ahUKEwir7ee5lsjjAhUiDmMBHZY0BQQQMwiDASgCMAI&iact=mrc&uact=8",
    "buy_url":"https://www.harrypotterplatform934.com/products/new-edition-harry-potter-and-the-philosophers-stone-paperback"
     
    
}


To update data we will start with the generes model

we need to create a new genere module to update the genere and we will do this using the id

This module will take 3 paramters the id  , a genere Object and return a callback

inside the module we must create a query variable being the id value of the object we want to change

Then we must create a variable called update this variable will esstentially contain the paramters that we want to chnage in this case being the name and we want it to be changed to the name value of the incoming object

module.exports.updateGenere =function(id, genereObject, callback)  
{
    let query = {_id:id}
    let update = {
        name:genereObject.name
    }

Then we can use the mongoose command findOneAndUpdate on the genere object being exported

this command will take in the query update and callback

genere.findOneAndUpdate(query , update ,  callback);


final code piece looks like this

module.exports.updateGenere =function(id, genereObject, callback)  
{
    let query = {_id:id}
    let update = {
        name:genereObject.name
    }
	genere.findOneAndUpdate(query , update ,  callback);
}


Then we go to the main app.js and create a new route this route howeever instead of post we use put on the app object

The main differecnes with this route is that we need a vraiable for the id of the genere object we want to change 

var id = req.params._id

and secondly the updateGenere method takes in the id the genere object and the call back just like the module

Genre.updateGenere(id,  genere, function(err , genere)


the remaindder of the code is the same

app.put("/api/generes/:_id"  , function(req,res)
{
    var id = req.params._id
    var genere = req.body
    Genre.updateGenere(id,  genere, function(err , genere)
    {
        if(err)
        {
            throw err
        }
        else
        {
            res.json(genere)
            
        }
    })
})

in rest easy we change the method to put and then send the following object with paramters we would like to chnage in this case being the name 

{
	
    "name":"Horror"
}


The same follows from book im just too tired to add this part


To delete 

we will create a new module for deleteing generes which will delete based on the id 

esstenially it's the same as the last module just that we wil not be taking in any genere object 

this will still taje in the id and use the query variable


module.exports.deleteGenere =function(id , callback)  
{
    let query = {_id:id}
	genere.remove(query , callback);
}

In the app.js we will create a route for deleting generes howeever in this case we will use app.delete()

again the only difference is the name of themodule being called and the fact that we are not using the genere object 

app.delete("/api/generes/:_id"  , function(req,res)
{
    var id = req.params._id
    Genre.deleteGenere(id, function(err , genere)
    {
        if(err)
        {
            throw err
        }
        else
        {
            res.json(genere)
            
        }
    })
})


finally in the rest easy chrome app we will change the method to delete pass in the id of the genere we wish to delte and then press send 